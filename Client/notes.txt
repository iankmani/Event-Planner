import React, { useEffect } from 'react';
import useStore from '../Store/store';
import EventCard from '../Pages/EventCard/EventCard';

const Admin = () => {
    const events = useStore((state) => state.events);
    const setEvents = useStore((state) => state.setEvents);
  const {
    
    users,

    setUsers,
    setLoadingEvents,
    setLoadingUsers,
    setError,
    loadingEvents,
    loadingUsers,
    error,
    // removeEvent,
    removeUser
  } = useStore();

  useEffect(() => {
    fetchEvents();
    fetchUsers();
  }, [setEvents], [setUsers]);

  const fetchEvents = async () => {
    setLoadingEvents(true);
    try {
      const response = await fetch("http://localhost:3000/api/users/GetAllEvents", {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
    //   if (!response.ok) throw new Error('Network response was not ok');
      const data = await response.json();
      setEvents(data);
    } catch (error) {
      setError('Error fetching events');
      console.error('Error fetching events', error);
    } finally {
      setLoadingEvents(false);
    }
  };

  const fetchUsers = async () => {
    setLoadingUsers(true);
    try {
      const response = await fetch('http://localhost:3000/api/users/GetAllUsers', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) throw new Error('Network response was not ok');
      const data = await response.json();
      setUsers(data);
    } catch (error) {
      setError('Error fetching users');
      console.error('Error fetching users', error);
    } finally {
      setLoadingUsers(false);
    }
  };

//   const deleteEvent = async (eventId) => {
//     try {
//       const response = await fetch(`http://localhost:3000/api/events/DeleteEvent/${eventId}`, {
//         method: 'DELETE',
//         headers: {
//           'Content-Type': 'application/json',
//         },
//       });
//       if (!response.ok) throw new Error('Network response was not ok');
//       removeEvent(eventId);
//     } catch (error) {
//       setError('Error deleting event');
//       console.error('Error deleting event', error);
//     }
//   };

  const handleRemoveUser = async (userId) => {
    try {
      const response = await fetch(`http://localhost:3000/api/users/DeleteUser/${userId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) throw new Error('Network response was not ok');
      removeUser(userId);
    } catch (error) {
      setError('Error removing user');
      console.error('Error removing user', error);
    }
  };

  return (
    <div>
      <h1>Admin Dashboard</h1>
      {error && <p style={{ color: 'red' }}>{error}</p>}

      <h2>Events</h2>
      {loadingEvents ? (
        <p>Loading events...</p>
      ) : (
        <div className="explore-page">
      {events.length > 0 ? (
        events.map((event) => (
          <EventCard key={event.id} {...event} />
        ))
      ) : (
        <p>No events found</p>
      )}
    </div>
      )}

      <h2>Users</h2>
      {loadingUsers ? (
        <p>Loading users...</p>
      ) : (
        <ul>
          {users && users.length > 0 ? (
            users.map((user) => (
              <li key={user.id}>
                {user.name}
                <button onClick={() => handleRemoveUser(user.id)}>Remove</button>
              </li>
            ))
          ) : (
            <li>No users</li>
          )}
        </ul>
      )}
    </div>
  );
};

export default Admin;
/////////



// Explore.js
import React, { useEffect } from 'react';
import EventCard from '../EventCard/EventCard';
import useStore from '../../Store/store.js'; 
import Header from '../../Components/Header/Header.jsx';
import './Explore.css';

const Explore = () => {
  const events = useStore((state) => state.events);
  const setEvents = useStore((state) => state.setEvents);

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await fetch('http://localhost:3000/api/users/GetAllEvents');
        const data = await response.json();
        setEvents(data.events); 
      } catch (error) {
        console.error('Error fetching events:', error);
      }
    };

    fetchEvents();
  }, []);

  return (
    <>
    <Header />
    <div className="explore-page">
      {events.length > 0 ? (
        events.map((event) => (
          <EventCard key={event.id} {...event} />
        ))
      ) : (
        <p>No events found</p>
      )}
    </div>
    </>
  );
};

export default Explore;
//////////




import { create } from "zustand";
import CultureSunday from "../assets/CultureSunday.jpeg";

const useStore = create((set) => ({
  events: [],
  users: [],
  // loadingEvents: true,
  // loadingUsers: true,
  // error: null,
  
  // setLoadingEvents: (loading) => set({ loadingEvents: loading }),
  // setLoadingUsers: (loading) => set({ loadingUsers: loading }),
  // setError: (error) => set({ error }),
  
  // setEvents: (events) => set({ events }),
  // setUsers: (users) => set({ users }),
  
  addEvent: (event) => set((state) => ({ events: [...state.events, event] })),
  removeEvent: (eventId) => set((state) => ({ events: state.events.filter(event => event.id !== eventId) })),
  removeUser: (userId) => set((state) => ({ users: state.users.filter(user => user.id !== userId) })),
}));

export default useStore;
///////









import React, {useState} from "react";
import useStore from "../../Store/store";
import Header from "../../Components/Header/Header";
import axios from 'axios'
import "./CreateEvent.css";

const CreateEvent = () => {
  const [imageInput, setImageInput] = useState()
  const addEvent = useStore((state) => state.addEvent);
  const cloudname = "dblm8shnt";
  const uploadPreset = "image Input";

  const handleUploadImage = async (e)=> {
    e.preventDefault();
    const payload = new FormData();
    payload.append('file', imageInput);
    payload.append('upload_preset', uploadPreset);
    console.log(imageInput)
    try{
      const response = await axios.post(`https://api.cloudinary.com/v1_1/${cloudname}/image/upload`, payload)
      console.log(response.data.secure_url)
    }
    catch(error){
      console.log(error)
      }
  }

  const handleSubmit = async (e) => {
    e.preventDefault();
    const { title, imageUrl, description, location, dateTime } = e.target.elements;

    const newEvent = {
      title: title.value,
      imageUrl: imageUrl.value,
      description: description.value,
      location: location.value,
      dateTime: dateTime.value,
    };

    console.log("Submitting event:", newEvent);
    try {
      const response = await fetch("http://localhost:3000/api/users/CreateEvent", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newEvent),
      });

      if (response.ok) {
        const createdEvent = await response.json();
        console.log("Created event:", createdEvent);
        addEvent(createdEvent);
        alert("Event created successfully");
      } else {
        const errorData = await response.json();
        console.error("Error response:", errorData);
        alert("Something went wrong");
      }
    } catch (error) {
      console.error("Error creating event:", error);
      alert("Error creating event");
    }
  };

  return (
    <>
    <Header/>
    <form onSubmit={handleSubmit} className="createEventPage">
      <div className="createEventForm">
        <input
          className="CreateEventInputs"
          type="text"
          name="title"
          placeholder="Title"
        />
        <input
          className="CreateEventInputs"
          type="file"
          name="imageUrl"
          placeholder="Image URL"
          onChange={(e) =>{
            setImageInput(
              e.target.files[0]
            )
          }}
        />
         <button onClick={handleUploadImage}>Upload Image</button>
        <input
          className="CreateEventInputs"
          type="text"
          name="description"
          placeholder="Description"
        />
       
        <input
          className="CreateEventInputs"
          type="text"
          name="location"
          placeholder="Location"
        />
        <input
          className="CreateEventInputs"
          type="text"
          name="dateTime"
          placeholder="Date and Time"
        />
        <button type="submit">Submit</button>
      </div>
    </form>
    </>
  );
};

export default CreateEvent;
/////



if (role === admin){
  navigate("/admin")
}
/////























import React, {useState} from 'react'
import { useEventStore } from '../../Store/EventStore';
import Header from "../../Components/Header/Header";
import axios from 'axios'
import "./CreateEvent.css";
import { useNavigate } from 'react-router-dom';

const CreateEvent = () => {
  const [imageInput, setImageInput] = useState();
  const [imageUrl, setImageUrl] = useState(null);
  const addEventCard = useEventStore((state) => state.addEventCard);
  const EventCards = useEventStore((state)=>state.EventCards);
  const cloudname = "dblm8shnt";
  const uploadPreset = "image Input";
  const navigate = useNavigate();

  const handleUploadImage = async (e)=> {
    e.preventDefault();
    const payload = new FormData();
    payload.append('file', imageInput);
    payload.append('upload_preset', uploadPreset);
    console.log(imageInput)
    try{
      const response = await axios.post(`https://api.cloudinary.com/v1_1/${cloudname}/image/upload`, payload)
      console.log(response.data.secure_url)
      setImageUrl(response.data.secure_url)
    }
    catch(error){
      console.log(error.message)
      }
  }

  const handleSubmit = async (e) => {
    e.preventDefault();
    const { title, description, location, dateTime } = e.target.elements;

    const newEvent = {
      title: title.value,
      imageUrl,
      description: description.value,
      location: location.value,
      dateTime: dateTime.value,
    };

    console.log(imageUrl)
    console.log("Submitting event:", newEvent);
    try {
      const response = await fetch("http://localhost:3000/api/users/CreateEvent", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newEvent),
      });
      const data = await response.json()
      console.log(data)
      addEventCard(data)
      navigate("/explore")


      // if (response.ok) {
      //   const createdEvent = await response.json();
      //   console.log("Created event:", createdEvent);
      //   addEventCard(createdEvent);
      //   alert("Event created successfully");
      // } else {
      //   const errorData = await response.json();
      //   console.error("Error response:", errorData);
      //   alert("Something went wrong");
      // }
    } catch (error) {
      console.error("Error creating event:", error.message);
      // alert("Error creating event");
    }
  };
  console.log(EventCards)

  return (
    <>
    <Header/>
    <form onSubmit={handleSubmit} className="createEventPage">
      <div className="createEventForm">
        <input
          className="CreateEventInputs"
          type="text"
          name="title"
          placeholder="Title"
        />
        <input
          className="CreateEventInputs"
          type="file"
          name="imageUrl"
          placeholder="Image URL"
          onChange={(e) =>{
            setImageInput(
              e.target.files[0]
            )
          }}
        />
         {/* <button onClick={handleUploadImage}>Upload Image</button> */}
        <input
          className="CreateEventInputs"
          type="text"
          name="description"
          placeholder="Description"
        />
       
        <input
          className="CreateEventInputs"
          type="text"
          name="location"
          placeholder="Location"
        />
        <input
          className="CreateEventInputs"
          type="text"
          name="dateTime"
          placeholder="Date and Time"
        />
        <button type="submit">Submit</button>
      </div>
    </form>
    </>
  );
};

export default CreateEvent;